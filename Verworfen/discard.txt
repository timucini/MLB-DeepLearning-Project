def matchTeamIDs(teams, gameLogs, dropna=True):
    #Generating unique identifier
    identifier = teams[['name','teamIDretro']].drop_duplicates(subset=['teamIDretro'])
    #Left-outer join
    gameLogs['Home team'] = pd.merge(gameLogs['Home team'], identifier, left_on='Home team', right_on='teamIDretro', how="left")['name']
    gameLogs['Visiting team'] = pd.merge(gameLogs['Visiting team'], identifier, left_on='Visiting team', right_on='teamIDretro', how="left")['name']
    #Returning gameLogs
    if dropna==True: return gameLogs.dropna().reset_index(drop=True)
    return gameLogs.reset_index(drop=True)
def filterSalaries(salaries, dropna=True):
    #Dropping columns
    columns = ['yearID','playerID','salary']
    salaries = salaries[columns]
    #Returning salaries
    if dropna==True: return salaries.dropna().reset_index(drop=True)
    return salaries.reset_index(drop=True)
#gameLogs    = matchTeamIDs(teams, gameLogs)
#salaries    = pd.read_csv(path+r'\~input\Salaries.csv', index_col=False)
#salaries    = filterSalaries(salaries)
#Getting data starting year
#yearIndicators = [teams, managers, fieldings, pitchings, battings]
#minYears = []
#for indicator in yearIndicators:
#    minYears.append(min(indicator['yearID'].unique()))
#minYear = max(minYears)
#Filtering to old data
#gameLogs    = gameLogs[gameLogs['Date']>=dt(minYear+1,1,1,0,0,0,0)].reset_index(drop=True)
#people      = people[pd.to_datetime(people['finalGame'], format="%Y-%m-%d")>=dt(minYear,1,1,0,0,0,0)].drop(columns=['finalGame']).reset_index(drop=True)
#teams       = teams[teams['yearID']>=minYear].reset_index(drop=True)
#managers    = managers[managers['yearID']>=minYear].reset_index(drop=True)
#salaries    = salaries[salaries['yearID']>=minYear].reset_index(drop=True)
#fieldings   = fieldings[fieldings['yearID']>=minYear].reset_index(drop=True)
#pitchings   = pitchings[pitchings['yearID']>=minYear].reset_index(drop=True)
#battings    = battings[battings['yearID']>=minYear].reset_index(drop=True)
#Getting uniqe IDs
#uniquePeopleIDs = []
#for idC in gameLogs.columns:
#        if idC.find(" ID")>-1:
#            uniquePeopleIDs = uniquePeopleIDs + gameLogs[idC].unique().tolist()
#uniquePeopleIDs = set(uniquePeopleIDs)
#uniqueTeamIDs = gameLogs['Visiting team'].unique().tolist()
#uniqueTeamIDs = uniqueTeamIDs + gameLogs['Home team'].unique().tolist()
#uniqueTeamIDs = set(uniqueTeamIDs)
#Filtering unnecessary data
#teams       = teams[teams['teamID'].isin(uniqueTeamIDs)].reset_index(drop=True)
#people      = people[people['playerID'].isin(uniquePeopleIDs)].reset_index(drop=True)
#managers    = managers[managers['playerID'].isin(uniquePeopleIDs)].reset_index(drop=True)
##salaries    = salaries[salaries['playerID'].isin(uniquePeopleIDs)].reset_index(drop=True)
#fieldings   = fieldings[fieldings['playerID'].isin(uniquePeopleIDs)].reset_index(drop=True)
#pitchings   = pitchings[pitchings['playerID'].isin(uniquePeopleIDs)].reset_index(drop=True)
#battings    = battings[battings['playerID'].isin(uniquePeopleIDs)].reset_index(drop=True)
#salaries.to_csv(path+r'\Filtered\_mlb_filtered_Salaries.csv', index = False)